class TorqueMotor

types
    public STATE = <Normal> | <Failed>;

instance variables
    private tq_m : real;            --torque from motor  
    private motor_state : STATE;

operations

    public TorqueMotor : () ==> TorqueMotor
    TorqueMotor() == (
        tq_m := 0;
        motor_state := <Normal>;
    );

    public SetTorque : real ==> ()
    SetTorque(tau) == duration(2e8) (
        tq_m := tau;        
    );

    public GetTorque : () ==> real
    GetTorque() == duration(1e8) (
        return tq_m;
    );

    public MotorFailed : () ==> ()
    MotorFailed() == duration(1e8) (
        motor_state := <Failed>;
    );

    public GetMotorState : () ==> STATE
    GetMotorState() == duration(0) (
        return motor_state;
    );

    public Step : () ==> ()
    Step() == duration(0) (
        MySystem`env.SetTorque(tq_m);
        MySystem`env.AdjustArmPosition();
    );

    thread
        periodic(1e8,0,0,0)(Step);

    sync
        mutex(SetTorque, Step, GetTorque);

end TorqueMotor