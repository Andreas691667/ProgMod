class RobotController

instance variables
    private ctl_qt : real;   -- target angle
    private ctl_q : real;    -- current angle (radians)
    private ctl_dq : real;   -- derivative (velocity)
    private K : real := 0; -- proportionality coefficient for updating velocity. Public for debugging needs
    private io : IO := new IO();


values
    private N1 : real = 0;          -- lower bound //operation range
    private N2 : real = 3.14/2;     -- upper bound //operation range

    private M1 : real = -10*3.14 / 180;         -- lower safety bound
    private M2 : real = (5*3.14)/9;             -- upper safety bound
    private alpha : real = 2 * 3.14 / 180;      -- 2 degrees accept margin when near target

operations
    public RobotController: () ==> RobotController
    RobotController() == (        
        -- initilialize variables
        ctl_dq :=0;
        ctl_q := 0;
        ctl_qt := 0;
    );

    -- update velocity based on error
    public UpdateVelocity : () ==> () 
    UpdateVelocity() == duration(5e8) (
        if (ctl_q <= M2 and ctl_q > N2) or (ctl_q >= M1 and ctl_q < N1)
        then 
            K := 0.1
        else if ((ctl_q <= N2 and ctl_q > (ctl_qt+alpha)) or (ctl_q >= N1 and ctl_q < (ctl_qt - alpha)))
        then
            K := 0.20
        else
            K := 0;

        ctl_dq := (ctl_qt-ctl_q) * K; 
        MySystem`env.SetVelocity(ctl_dq);            -- change in environment is instantaneous
        
        PrintState(time);
    );

    private PrintState : (real) ==> ()
    PrintState(time_) == duration(0) (
        dcl str : seq of char := "";
        -- "ctl: \n time, ctl_q, ctl_dq, K, \n";
        str := str ^ VDMUtil`val2seq_of_char[real](time_/1e9);
        str := str ^ ",";
        str := str ^ VDMUtil`val2seq_of_char[real](ctl_q);
        str := str ^ ",";
        str := str ^ VDMUtil`val2seq_of_char[real](ctl_dq);
        str := str ^ ",";
        str := str ^ VDMUtil`val2seq_of_char[real](K);
        str := str ^ ",";
        def - = io.echo(str) in skip;
    );

    -- set target angle method 
    public SetTargetAngle : (real) ==> () 
    SetTargetAngle(theta) == duration(1E8) (
        ctl_qt := theta;
    )
    pre theta >= N1 and theta <= N2;

    -- Update variables from the environment. Duration probably not 0. 
    public MonitorArm : () ==> ()
    MonitorArm() == duration(1e8) (
        ctl_q := MySystem`env.GetPosition();
    );

    -- getter functions. at this point these are made pure to be able to call them in precondition of step
    public pure GetPosition : () ==> real 
    GetPosition() == (
        return ctl_q;
    );

    public pure GetVelocity : () ==> real 
    GetVelocity() == (
        return ctl_dq;
    );

    public pure GetTarget : () ==> real 
    GetTarget() == (
        return ctl_qt;
    );

end RobotController