class RobotArmEnvironment

instance variables
    private env_q : real;    -- current angle (radians)
    private env_dq : real;   -- derivative (velocity)
    io : IO := new IO();

values
    N1 : real = 0;          -- lower bound //operation range
    N2 : real = 3.14/2;     -- upper bound //operation range

    M1 : real = -10 * 3.14 / 180;   --lower safety bound (-10 degrees)
    M2 : real = (5*3.14)/9;         -- upper bound (100 degrees) //safety limit
    

operations
    public RobotArmEnvironment: () ==> RobotArmEnvironment
    RobotArmEnvironment() == (
        -- initialize variables
        env_q := 0;
        env_dq := 0;
    );

    -- step function
    public Step : (real) ==> ()
    Step(TimeStep) == duration(0) (      
        env_q := env_q + env_dq * TimeStep;
        PrintState(time);
    )
    pre TimeStep > 0 and                                                                    -- positive time 
        (MySystem`ctl.GetTarget()   >= N1 and MySystem`ctl.GetTarget() <= N2) and           -- target angle within operation range
        (MySystem`ctl.GetPosition() <= M2 and MySystem`ctl.GetPosition() >= M1) and         -- current angle within safety range
        (MySystem`ctl.GetVelocity() = 0 or 
        (TimeStep < (M2-MySystem`ctl.GetPosition())/abs(MySystem`ctl.GetVelocity()) and     -- Refer to assignment 2 for derivation
        TimeStep > (M1-MySystem`ctl.GetPosition())/abs(MySystem`ctl.GetVelocity())))        -- These gives upper bounds for the size of time step.         

    post (MySystem`ctl.GetPosition() <= M2) and (MySystem`ctl.GetPosition() >= M1);
    
    public PrintState : (real) ==> ()
    PrintState(time_) == duration(0) (
        dcl str : seq of char := "env: \n";
        str := str ^ VDMUtil`val2seq_of_char[real](time_);
        str := str ^ ",";
        str := str ^ VDMUtil`val2seq_of_char[real](env_q);
        str := str ^ ",";
        str := str ^ VDMUtil`val2seq_of_char[real](env_dq);
        str := str ^ "\n";
        def - = io.echo(str) in skip;
    );

    public GetPosition : () ==> real
    GetPosition() == duration(0) (
        return env_q;
    );

    public GetVelocity : () ==> real
    GetVelocity() == duration(0) (
        return env_dq;
    );

    public SetVelocity : real ==> ()
    SetVelocity(vel) == duration(0) (
        env_dq := vel;
    );

end RobotArmEnvironment